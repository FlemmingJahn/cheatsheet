H::Automatic variables
The name of the target.C::$@
The target member name, when the target is an archive member.C::$%
The name of the first (or only) prerequisite.C::$<
The names of all the prerequisites that are newer than the target, with spaces between them.C::$?
The names of all the prerequisites, with spaces between them. Omits duplicate prerequisitesC::$^
The names of all the prerequisites, with spaces between them. Does not omits duplicate prerequisitesC::$+
The stem with which an implicit rule matches.C::$*
The directory part and the file-within-directory part of $@C::$(@D) or $(@F)
The directory part and the file-within-directory part of $*C::$(*D) or $(*D)
The directory part and the file-within-directory part of $%C::$(%D) or $(%F)
The directory part and the file-within-directory part of $<C::$(<D) or $(<F)
The directory part and the file-within-directory part of $^C::$(^D) or$(^F)
The directory part and the file-within-directory part of $+C::$(+F) or $(+D)
The directory part and the file-within-directory part of $?C::$(?D) or $(?F)
H::Built-in functions
Replace from with to in text.C::$(subst from,to,text)
Replace words matching pattern with replacement in text.C::$(patsubst pattern,replacement,text)
Remove excess whitespace characters from string.C::$(strip string)
Locate find in text.C::$(findstring find,text)
Select words in text that match one of the pattern words.C::$(filter pattern...,text)
Select words in text that do not match any of the pattern words.C::$(filter-out pattern...,text)
Sort the words in list lexicographically, removing duplicates.C::$(sort list)
Extract the directory part of each file name.C::$(dir names...)
Extract the non-directory part of each file name.C::$(notdir names...)
Extract the suffix (the last dot and following characters) of each file name.C::$(suffix names...)
Extract the base name (name without suffix) of each file name.C::$(basename names...)
Append suffix to each word in names.C::$(addsuffix suffix,names...)
Prepend prefix to each word in names.C::$(addprefix prefix,names...)
Join two parallel lists of words.C::$(join list1,list2)
Extract the nth word (one-origin) of text.C::$(word n,text)
Count the number of words in text.C::$(words text)
Returns the list of words in text from s to e.C::$(wordlist s,e,text)
Extract the first word of names.C::$(firstword names...)
Find file names matching a shell file name pattern (not a `%' pattern).C::$(wildcard pattern...)
When this function is evaluated, make generates a fatal error with the message text.C::$(error text...)
When this function is evaluated, make generates a warning with the message text.C::$(warning text...)
Execute a shell command and return its output.C::$(shell command)
Return a string describing how the make variable variable was defined.C::$(origin variable)
Evaluate text with var bound to each word in words, and concatenate the results.C::$(foreach var,words,text)
Evaluate the var replacing any references to $(1),$(2) with the 1st, 2nd, etc. param values.C::$(call var,param,...)
H::OPTIONS
-m   These options are ignored for compatibility with other versions of make.
-C dir  Change to directory dir before reading the makefiles.
-d      Print debugging information in addition to normal processing.
-f file Use file as a makefile.
-i      Ignore all errors in commands executed to remake files.
-I dir  Specifies a directory dir to search for included makefiles.
-j jobs Specifies the number of jobs (commands) to run simultaneously.
-k      Continue as much as possible after an error.
-l load Specifies that no new jobs (commands) should be started if there are others jobs running.
-n      Print the commands that would be executed, but do not execute them.
-o file Do not remake the file file even if it is older than its dependencies.
-p      Print the data base (rules and variable values) that results from reading the makefiles
-q      ``Question mode''.  Do not run any commands, or print anything; just return an exit status that is zero.
-r       Eliminate use of the built-in implicit rules.  Also clear out the default list of suffixes for suffix rules.
-s      Silent operation; do not print the commands as they are executed.
-S      Cancel the effect of the -k option.
-t      Touch files (mark them up to date without really changing them) instead of running their commands.
-v      Print the version of the make program plus a copyright.
-w      Print a message containing the working directory before and after other processing.
-W file Pretend that the target file has just been modified.
