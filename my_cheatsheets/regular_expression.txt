H::Regular Expressions
($var =~ /re/), ($var !~ /re/) matches / does not match
m/pattern/igmsoxc matching pattern
qr/pattern/imsox store regex in variable
s/pattern/replacement/igmsoxe search and replace
Modifiers:
i case-insensitive o compile once
g global x extended
m multiline c don't reset pos (with g)
s as single line (. matches \n) e evaluate replacement
Syntax:
\ escape
. any single char
^ start of line
$ end of line
*, *? 0 or more times (greedy / nongreedy)
+, +? 1 or more times (greedy / nongreedy)
?, ?? 0 or 1 times (greedy / nongreedy)
\b, \B word boundary ( \w - \W) / match except at w.b.
\A string start (with /m)
\Z string end (before \n)
\z absolute string end
\G continue from previous m//g
[...] character set
(...) group, capture to $1, $2
(?:...) group without capturing
{n,m} , {n,m}? at least n times, at most m times
{n,} , {n,}? at least n times
{n} , {n}? exactly n times
| or
\1, \2 text from nth group ($1, ...)
Escape Sequences:
\a alarm (beep) \e escape
\f formfeed \n newline
\r carriage return \t tab
\cx control-x \l lowercase next char
\L lowercase until \E \U uppercase until \E
\Q diable metachars until \E \E end case modifications
Character Classes:
[amy] 'a', 'm', or 'y'
[f-j.-] range f-j, dot, and dash
[^f-j] everything except range f-j
\d, \D digit [0-9] / non-digit
\w, \W word char [a-zA-Z0-9_] / non-word
char
\s, \S whitepace [ \t\n\r\f] / non-space
\C match a byte
\pP, \PP match p-named unicode / non-p-named-unicode
\p{...}, \P{...} match long-named unicode / non-named-unicode
\X match extended unicode
Posix:
[:alnum] alphanumeric
[:alpha] alphabetic
[:ascii:] any ASCII char
[:blank:] whitespace [ \t]
[:cntrl:] control characters
[:digit:] digits
[:graph:] alphanum + punctuation
[:lower:] lowercase chars
[:print:] alphanum, punct, space
[:punct:] punctuation
[:space:] whitespace [\s\ck]
[:upper:] uppercase chars
[:word:] alphanum + '_'
[:xdigit:] hex digit
[:^digit:] non-digit
